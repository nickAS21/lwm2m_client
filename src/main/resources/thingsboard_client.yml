lwm2m:
  server:
    bind_address: "${SERVER_ADDRESS:localhost}"
    bind_port: "${SERVER_PORT:5685}"
    short_id: "${SERVER_SHORT_ID:123}"
    secure:
      bind_address: "${SECURE_SERVER_ADDRESS:localhost}"
      bind_port: "${SECURE_SERVER_PORT:5686}"
      # Get RAW public key parameters
      rpk_public_x: "${RPK_SERVER_PUBLIC_X:405354ea8893471d9296afbc8b020a5c6201b0bb25812a53b849d4480fa5f069}"
      rpk_public_y: "${RPK_SERVER_PUBLIC_Y:30c9237e946a3a1692c1cafaa01a238a077f632c99371348337512363f28212b}"
      # Get keystore parameters
      key_store_type: "${LWM2M_KEYSTORE_TYPE:JKS}"
      #      key_store_type: "${LWM2M_KEYSTORE_TYPE:PKCS12}"
      key_store_path_file: "${SERVER_KEY_STORE_PATH_FILE:}"
      key_store_path_resource: "credentials/serverKeyStore.jks"
      key_store_pwd: "${SERVER_KEY_STORE_PWD:server_ks_password}"
      alias: "${SERVER_ALIAS:server}"
  bootstrap:
    enable: "${BOOTSTRAP:false}"
    bind_address: "${SERVER_ADDRESS:localhost}"
    bind_port: "${SERVER_PORT:5687}"
    short_id: "${SERVER_SHORT_ID:456}"
    secure:
      bind_address: "${SECURE_SERVER_ADDRESS:localhost}"
      bind_port: "${SECURE_SERVER_PORT:5688}"
      # Get RAW public key parameters
      rpk_public_x: "${RPK_BOOTSTRAP_PUBLIC_X:993ef2b698c6a9c0c1d8be78b13a9383c0854c7c7c7a504d289b403794648183}"
      rpk_public_y: "${RPK_BOOTSTRAP_PUBLIC_Y:267412d5fc4e5ceb2257cb7fd7f76ebdac2fa9aa100afb162e990074cc0bfaa2}"
      # Get keystore parameters
      alias: "${BOOTSTRAP_ALIAS:bootstrap}"
  client:
    create_psk_rpk_key: "${CREATE_PSK_RPK_KEY:true}"
    endpoint: "${ENDPOINT:client_lwm2m}"
    sub_endpoint: "${SUB_ENDPOINT:}"
    bind_address: "${CLIENT_ADDRESS:}"
    bind_port: "${CLIENT_PORT:0}"
    model_folder_path: "${FOLDER_PATH_MODEL:}"
    support_deprecated_ciphers: "${OLD_CIPHERS:false}"
    # In sec: if value == 300 sec, then 53 sec update register
    lifetime: "${LIFETIME:300}"
    # The communication period in seconds which should be smaller than the lifetime, will be used even if bootstrap_enable==true.
    communication_period: "${COMMUNICATION_PERIOD:}"
    # Force reconnect/rehandshake on update.
    reconnect_on_update: "${RECONNECTED_ON_UPDATE:false}"
    # Do not try to resume session always, do a full handshake.
    force_full_handshake: "${FORCE_FULL_HANDSHAKE:false}"
    # activate support of old/unofficial content format. See https://github.com/eclipse/leshan/pull/720
    support_old_format: "${SUPPORT_OLD_FORMAT:false}"
    # Use additional attributes at registration time, syntax is:
    # --ADD_ATTRIBUTES=attrName1:attrValue1;attrName2:attrValue2 ...")
    add_attributes: "${ADD_ATTRIBUTES:}"
    # Object Location: syntax is example: --POS=50.4501:30.5234
    pos: "${POS:}"
    # Scale factor must be a float, e.g. 1.0 or 0.01
    scale_factor: "${SCALE_FACTOR:1.0}"
    secure:
      #leshan.core (V1_1)
      #DTLS security modes:
      #0: Pre-Shared Key mode
      #1: Raw Public Key mode
      #2: Certificate mode X509
      #3: NoSec mode  *
      #OMA-TS-LightweightM2M_Core-V1_1_1-20190617-A (add)
      #4: Certificate mode X509 with EST
      dtls_mode: "${DTLIS_MODE:2}"
      psk_identity: "${PSK_IDENTITY:}"
      psk_identity_sub: "${PSK_IDENTITY_SUB:_identity}"
      # Resource MUST be used to store the PSK, defined in [RFC4279]. Since the default PSK ciphersuite
      #defined in this specification use a 128-bit AES key it is RECOMMENDED to provision a 16 byte (128 bit) key or longer
      #in the Secret Key Resource. Clients and Servers MUST support PSK keys of up to 64 bytes in length, as required by
      #[RFC7925]. Recommendations for generating random keys are provided in RFC 4086 [RFC4086] and in NIST Special
      #Publication 800-90A Revision 1 [SP800-90A].
#      psk_key: "${PSK_KEY:67f6aad1db5e9bdb9778a35e7f4f24f221c8646ce23cb8cf852fedee029cda9c}"
      psk_key: "${PSK_KEY:011b69a96ba580f57b3ca8718da03b906ea39b3add998c4ce0e25464be12494d}"
      # Raw public key encoded using the SubjectPublicKeyInfo structure, as described in [RFC7250]
      rpk_public_x: "${RPK_CLIENT_PUBLIC_X:33dd9c657e9d17ece73c40c1718ebcc6047bd312530faee8446c604093fe6f00}"
      rpk_public_y: "${RPK_CLIENT_PUBLIC_Y:f15c1c62d516c792d1334edc9a93140a70e999ff5cbf928b1ecf2fdff0b81c19}"
      # The private key of the TLS/DTLS client encoded as OneAsymetricKey, as defined in [RFC5958]
      rpk_private_s: "${RPK_CLIENT_PRIVATE_S:5f0c08da13583f965324e7619aa7af1401a79da99ccd54820bdd486ebcfa0d5a}"
      # If a LwM2M Server supports X.509 Certificate mode it MUST support:
      # - TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8, as defined in [RFC7251] and mandated in [RFC7925]
      # - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, as defined in [RFC5289]
      # Get keystore parameters
      key_store_type: "${LWM2M_KEYSTORE_TYPE:JKS}"
      #      key_store_type: "${LWM2M_KEYSTORE_TYPE:PKCS12}"
      key_store_path_file: "${CLIENT_KEY_STORE_PATH_FILE:}"
      key_store_path_resource: "credentials/clientKeyStore.jks"
      key_store_pwd: "${CLIENT_KEY_STORE_PWD:client_ks_password}"
      alias: "${CLIENT_ALIAS:client}"



